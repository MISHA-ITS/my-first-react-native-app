import React from "react";
import {
    View,
    Text,
    TextInput,
    Pressable,
    ScrollView,
    Alert,
} from "react-native";
import { useRouter } from "expo-router";
import { Formik } from "formik";
import * as Yup from "yup";

// üîπ –°—Ö–µ–º–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Yup
const SignUpSchema = Yup.object().shape({
    firstName: Yup.string()
        .min(2, "–ú—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏")
        .required("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è"),
    lastName: Yup.string()
        .min(2, "–ú—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏")
        .required("–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ"),
    email: Yup.string()
        .email("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email")
        .required("–í–≤–µ–¥—ñ—Ç—å email"),
    password: Yup.string()
        .min(6, "–ú—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤")
        .required("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"),
    repeatPassword: Yup.string()
        .oneOf([Yup.ref("password"), undefined], "–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å")
        .required("–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"),
});

const SignUpScreen = () => {
    const router = useRouter();

    const handleSignUp = async (values: any, { setSubmitting, resetForm }: any) => {
        try {
            // üîπ –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—É (–¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É)
            await new Promise((resolve) => setTimeout(resolve, 1000));

            Alert.alert("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞", "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ —É —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç!");
            const { firstName, lastName, email, password } = values;
            console.log(`users first name: ${firstName}`)
            console.log(`users last name: ${lastName}`)
            console.log(`users email: ${email}`)
            console.log(`users password: ${password}`)
            resetForm();
            router.replace("/sign-in");
        } catch (error: any) {
            Alert.alert("–ü–æ–º–∏–ª–∫–∞", error.message || "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫");
        } finally {
            setSubmitting(false);
        }
    };

    return (
        <ScrollView
            contentContainerStyle={{ flexGrow: 1 }}
            keyboardShouldPersistTaps="handled"
            className="bg-gray-50 dark:bg-gray-900 px-6 py-10"
        >
            <View className="flex-1 justify-center">
                <Text className="text-3xl font-bold text-center text-blue-600 mb-8">
                    –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
                </Text>

                <Formik
                    initialValues={{
                        firstName: "",
                        lastName: "",
                        email: "",
                        password: "",
                        repeatPassword: "",
                    }}
                    validationSchema={SignUpSchema}
                    onSubmit={handleSignUp}
                >
                    {({
                          handleChange,
                          handleBlur,
                          handleSubmit,
                          values,
                          errors,
                          touched,
                          isSubmitting,
                      }) => (
                        <>
                            {/* –Ü–º'—è */}
                            <View className="mb-4">
                                <Text className="text-gray-700 dark:text-gray-200 mb-2">
                                    –Ü–º&apos;—è
                                </Text>
                                <TextInput
                                    className={`border rounded-xl px-4 py-3 bg-white dark:bg-gray-800 ${
                                        touched.firstName && errors.firstName
                                            ? "border-red-500"
                                            : "border-gray-300 dark:border-gray-700"
                                    }`}
                                    placeholder="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è"
                                    value={values.firstName}
                                    onChangeText={handleChange("firstName")}
                                    onBlur={handleBlur("firstName")}
                                />
                                {touched.firstName && errors.firstName && (
                                    <Text className="text-red-500 text-sm mt-1">
                                        {errors.firstName}
                                    </Text>
                                )}
                            </View>

                            {/* –ü—Ä—ñ–∑–≤–∏—â–µ */}
                            <View className="mb-4">
                                <Text className="text-gray-700 dark:text-gray-200 mb-2">
                                    –ü—Ä—ñ–∑–≤–∏—â–µ
                                </Text>
                                <TextInput
                                    className={`border rounded-xl px-4 py-3 bg-white dark:bg-gray-800 ${
                                        touched.lastName && errors.lastName
                                            ? "border-red-500"
                                            : "border-gray-300 dark:border-gray-700"
                                    }`}
                                    placeholder="–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ"
                                    value={values.lastName}
                                    onChangeText={handleChange("lastName")}
                                    onBlur={handleBlur("lastName")}
                                />
                                {touched.lastName && errors.lastName && (
                                    <Text className="text-red-500 text-sm mt-1">
                                        {errors.lastName}
                                    </Text>
                                )}
                            </View>

                            {/* Email */}
                            <View className="mb-4">
                                <Text className="text-gray-700 dark:text-gray-200 mb-2">
                                    Email
                                </Text>
                                <TextInput
                                    className={`border rounded-xl px-4 py-3 bg-white dark:bg-gray-800 ${
                                        touched.email && errors.email
                                            ? "border-red-500"
                                            : "border-gray-300 dark:border-gray-700"
                                    }`}
                                    placeholder="–í–≤–µ–¥—ñ—Ç—å email"
                                    keyboardType="email-address"
                                    autoCapitalize="none"
                                    value={values.email}
                                    onChangeText={handleChange("email")}
                                    onBlur={handleBlur("email")}
                                />
                                {touched.email && errors.email && (
                                    <Text className="text-red-500 text-sm mt-1">
                                        {errors.email}
                                    </Text>
                                )}
                            </View>

                            {/* –ü–∞—Ä–æ–ª—å */}
                            <View className="mb-4">
                                <Text className="text-gray-700 dark:text-gray-200 mb-2">
                                    –ü–∞—Ä–æ–ª—å
                                </Text>
                                <TextInput
                                    className={`border rounded-xl px-4 py-3 bg-white dark:bg-gray-800 ${
                                        touched.password && errors.password
                                            ? "border-red-500"
                                            : "border-gray-300 dark:border-gray-700"
                                    }`}
                                    placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                                    secureTextEntry
                                    value={values.password}
                                    onChangeText={handleChange("password")}
                                    onBlur={handleBlur("password")}
                                />
                                {touched.password && errors.password && (
                                    <Text className="text-red-500 text-sm mt-1">
                                        {errors.password}
                                    </Text>
                                )}
                            </View>

                            {/* –ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è */}
                            <View className="mb-6">
                                <Text className="text-gray-700 dark:text-gray-200 mb-2">
                                    –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –ø–∞—Ä–æ–ª—å
                                </Text>
                                <TextInput
                                    className={`border rounded-xl px-4 py-3 bg-white dark:bg-gray-800 ${
                                        touched.repeatPassword && errors.repeatPassword
                                            ? "border-red-500"
                                            : "border-gray-300 dark:border-gray-700"
                                    }`}
                                    placeholder="–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                                    secureTextEntry
                                    value={values.repeatPassword}
                                    onChangeText={handleChange("repeatPassword")}
                                    onBlur={handleBlur("repeatPassword")}
                                />
                                {touched.repeatPassword && errors.repeatPassword && (
                                    <Text className="text-red-500 text-sm mt-1">
                                        {errors.repeatPassword}
                                    </Text>
                                )}
                            </View>

                            {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó */}
                            <Pressable
                                onPress={handleSubmit as any}
                                disabled={isSubmitting}
                                className={`${
                                    isSubmitting ? "bg-blue-400" : "bg-blue-600 active:bg-blue-700"
                                } py-3 rounded-2xl mb-4`}
                            >
                                <Text className="text-white text-center text-base font-semibold">
                                    {isSubmitting ? "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è..." : "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"}
                                </Text>
                            </Pressable>

                            {/* –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ Sign In */}
                            <Pressable onPress={() => router.push("/sign-in")}>
                                <Text className="text-center text-gray-600 dark:text-gray-300">
                                    –£–∂–µ –º–∞—î—Ç–µ –∞–∫–∞—É–Ω—Ç?{" "}
                                    <Text className="text-blue-600 font-semibold">–£–≤—ñ–π—Ç–∏</Text>
                                </Text>
                            </Pressable>

                            <Pressable
                                onPress={() => router.replace("/")}
                                className="bg-gray-700 px-6 py-3 rounded-2xl active:bg-gray-950 mt-10"
                            >
                                <Text className="text-center text-white text-base font-semibold">
                                    –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
                                </Text>
                            </Pressable>
                        </>
                    )}
                </Formik>
            </View>
        </ScrollView>
    );
};

export default SignUpScreen;
